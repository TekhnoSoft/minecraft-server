Conditions:
	CondCanBreed:
		Patterns:
			[entity] %entity% (1¦can|2¦can([ ]no|')t) [be] breed
	CondCanSeePlayer:
		Patterns:
			[player] %player% (1¦can|2¦can([ ]no|')t) see [player] %player%
	CondClientTimeRelative:
		Patterns:
			[skellett] [client] relative time of %player% [is] [%-boolean%] [relative] [to] [server]
	CondEventCancelled:
		Patterns:
			[(the|this)] event (1¦is|2¦is(n't| not)) cancelled
	CondFileExists:
		Patterns:
			[skellett] [file] exist(s|ence) [(at|of)] %string% [is %-boolean%]
	CondHasAuthor:
		Patterns:
			book %itemstack% (1¦(ha(s[n[']t]|ve)|contain[s])|2¦(do[es](n't| not) have| do[es](n't| not) contain)) [had] [an] [book [meta]] author
	CondHasTitle:
		Patterns:
			book %itemstack% (1¦(ha(s[n[']t]|ve)|contain[s])|2¦(do[es](n't| not) have| do[es](n't| not) contain)) [had] [a] [book [meta]] title
	CondIsAdult:
		Patterns:
			[entity] %entity% (1¦is|2¦is(n't| not)) [a[n]] adult
	CondIsInWater:
		Patterns:
			[entity] %entity% (1¦is|2¦is(n't| not)) in water
	CondIsPowered:
		Patterns:
			[block] %block% (1¦(is|has)|2¦(is|has)(n't| not)) [got] [redstone] powered
	CondIsSticky:
		Patterns:
			[piston] %block% (1¦is|2¦is(n't| not)) [a] sticky [piston]
	CondIsWhitelisted:
		Patterns:
			[server] whitelist[ed] [state]
	CondJukeboxIsPlaying:
		Patterns:
			juke[ ]box %block% (1¦is|2¦is(n't| not)) playing [a] (record|track|song)
	CondLineOfSight:
		Patterns:
			%entity% [can] (see|visibly see|line of sight) [can see] %entity%
	CondMapBeingHandled:
		Patterns:
			[map] %map% (1¦is|2¦is(n't| not)) being handled [by skellett]
	CondObjectiveExists:
		Patterns:
			objective %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]] (1¦(is set|[does] exist[s])|2¦(is(n't| not) set|does(n't| not) exist[s]))
	CondObjectiveIsModifiable:
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective %objective% (1¦is modifiable|2¦is(n't| not) modifiable)
	CondPlayerViewingCredits:
		Patterns:
			[player] %player% (1¦is|2¦is(n't| not)) viewing [the] credits
	CondRegeneratorExists:
		Patterns:
			[skellett] regenerator with id %string% (1¦does|2¦does(n't| not)) exist
	CondScoreboardExists:
		Patterns:
			score[ ][board] %string% (1¦(is set|[does] exist[s])|2¦(is(n't| not) set|does(n't| not) exist[s]))
	CondStylishExists:
		Patterns:
			(stylish|style|simple) [score][ ]board %string% (1¦(is set|[does] exist[s])|2¦(is(n't| not) set|does(n't| not) exist[s]))
	CondTeamHasEntry:
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) (1¦(ha(s|ve)|contain[s])|2¦(do[es](n't| not) have| do[es](n't| not) contain)) [the] [entry] %string% [(in|within)] the [team] %team%
	CondVirtualMap:
		Patterns:
			[map] %map% (1¦is|2¦is(n't| not)) virtual
Effects:
	EffActionbar:
		Patterns:
			(send|show) [a[n]] action[ ]bar [(with|from)] [string] %string% to %players%
	EffAddPage:
		Patterns:
			add [a] page [with] [(text|data)] [%-string%] to [book] %itemstack%
	EffAddPlayerNametag:
		Patterns:
			[skellett] add %player% to [the] [name][ ]tag [(with|of)] [id] %string% [(with|from) [[score][ ]board] %-scoreboard%]
	EffApplyBetterPotion:
		Patterns:
			[skellett] apply [potion[s]] [of] %potioneffecttype% [potion] [[[of] tier] %-number%] to %livingentities% [for %-timespan%] [[and] ambient %-boolean% [hide [particle [effects] %-boolean% [colo[u]r %-color%]]]]
	EffBabyAdult:
		Patterns:
			[(make|set)] [entity] %entity% [to] [a[n]] (1¦baby|2¦adult)
	EffBlockConstructor:
		Patterns:
			(create|start|make|build|construct) %string% with %itemtype% at %location% [[with effect[s]] %-boolean%]
	EffBreakBlockNaturally:
		Patterns:
			[skellett] break %block% [naturally] [(with|using) %-itemstack%]
			[skellett] [naturally] break %block% [(with|using) %-itemstack%]
	EffChunkLoad:
		Patterns:
			[skellett] load chunk %chunk% [[with] generat(e|ing) %-boolean%]
	EffChunkUnload:
		Patterns:
			[skellett] unload chunk %chunk% [[with] sav(e|ing) %-boolean%]
	EffClearSlot:
		Patterns:
			(clear|empty|reset) (inventory|menu|gui) [slot %-integer%] [(of|in)] %inventory%
	EffClientChest:
		Patterns:
			[skellett] (1¦open|2¦close) [the] %block% for %players%
			[skellett] make [the] %block% (appear|look) (1¦open|2¦closed) for %players%
			[skellett] play chest (1¦open|2¦close) animation at %block% for %players%
	EffCreateNametag:
		Patterns:
			[skellett] [(create|set|make)] [a] [name][ ]tag [ID] [(with|named)] [(name|string|text|id)] %string% [(with|from) [player] %-player%]
	EffCreateRegenerator:
		Patterns:
			(create|make) [a] [new] [skellett] regenerator with ID %string% (from|within) [location[s]] %location% (to|and) %location%
	EffDeleteNametag:
		Patterns:
			[skellett] delete [the] [name][ ]tag [with] [id] %string%
	EffDeleteRegenerator:
		Patterns:
			(delete|remove) [the] [skellett] regenerator with ID %string% [re[ ]build %-boolean%]
	EffDeleteScoreboard:
		Patterns:
			(delete|clear|remove) (score[ ][board]|[skellett[ ]]board)) [(with|named)] [(name|id)] %string%
	EffDownload:
		Patterns:
			[skellett] d[ownload][l] [from] [url] %string% to %string%
	EffEntityEffect:
		Patterns:
			[skellett] (make|force) %entity% [to] [(perform|do)] [entity] effect %entityeffect%
	EffFilesCreate:
		Patterns:
			[skellett] c[reate][ ][f][ile] %string%
	EffFilesDelete:
		Patterns:
			[skellett] d[elete][ ][f][ile] %string%
	EffFirework:
		Patterns:
			[skellett] (launch|deploy) [%-strings%] firework[s] at %locations% [with] (duration|timed|time) %number% [colo[u]r[ed] (%-strings%|%-color%)]
	EffForceRespawn:
		Patterns:
			[skellett] [force] respawn [of] %player%
			[skellett] force [the] %player% to respawn
	EffHidePlayer:
		Patterns:
			[skellett] hide [player] %player% from %player%
	EffLeashBlock:
		Patterns:
			(leash|lead) %livingentities% to %block%
	EffManageMap:
		Patterns:
			(manage|override|overwrite|create) [skellett] map %map% [[and] [with] override %-boolean%]
	EffMapDrawCursor:
		Patterns:
			draw [map] cursor %string% pointing %number% at [coordinate[s]] [x] %number%(,| and) [y] %number% on [skellett] map %map%
	EffMapDrawImage:
		Patterns:
			draw [buffered] image %mapimage% [at [coordinate[s]] [x] %number%(,| and) [y] %number%] on [skellett] map %map%
	EffMapDrawText:
		Patterns:
			draw text %string% at [coordinate[s]] [x] %number%(,| and) [y] %number% on [skellett] map %map%
	EffMessageCenter:
		Patterns:
			(message|send [message]) center[ed] %strings% to %players% [[with[ text]] %-string%]
	EffNMSTest:
		Patterns:
			skellett nms of %object%
	EffOpenBook:
		Patterns:
			open book %itemstack% to %player%
	EffOpenInventory:
		Patterns:
			[skellett] open [[better] inventory [type]] %string% [with %-number% row[s]] [named %-string%] to %players%
	EffPlaySound:
		Patterns:
			[skellett] play [(skellett|better)] [sound] (1¦%-sound%|2¦%-string%) at %locations% (with|at|and) volume %number% (and|with|at) pitch %number%
	EffPlaySoundPlayer:
		Patterns:
			[skellett] play [(skellett|better)] [sound] (1¦%-sound%|2¦%-string%) (for|to) %players% (with|at|and) volume %number% (and|with|at) pitch %number%
	EffPlayerTeleportWorldSpawn:
		Patterns:
			teleport %players% to [world] spawn (of|in) [world] %string%
			[skellett] teleport %players% to world %string% [spawn]
	EffReconfigureRegenerator:
		Patterns:
			re[ ]configure [the] [skellett] regenerator with ID %string%
	EffRegenerate:
		Patterns:
			re(generate|[ ]build) [the] [skellett] regenerator with ID %string%
	EffRegisterObjective:
		Patterns:
			register [new] (score[ ][board]|[skellett[ ]]board) objective %string% with [criteria] %string% [[(in|from)] %-scoreboard%]
			register [new] objective %string% with [criteria] %string% [(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]
	EffRegisterTeam:
		Patterns:
			register [a] [new] (score[ ][board]|[skellett[ ]]board) team %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	EffReloadWhitelist:
		Patterns:
			reload [the] white[ ]list
	EffRemovePlayerNametag:
		Patterns:
			[skellett] remove %player% from [the] [name][ ]tag [(with|of)] [id] %string%
	EffResetEntryScores:
		Patterns:
			reset [(the|all)] [of] [the] (score[ ][board]|[skellett[ ]]board) scores of [entry] %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
			reset [(the|all)] [of] [the] (score[ ][board]|[skellett[ ]]board) [entry] %string%'s scores [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
			(score[ ][board]|[skellett[ ]]board) reset [(the|all)] [of] [the] scores of [entry] %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	EffResetNametag:
		Patterns:
			[skellett] reset [the] [name][ ]tag [with] [id] %string%
	EffResetNametagPrefix:
		Patterns:
			[skellett] reset [the] [name][ ]tag prefix [(with|of)] [id] %string%
	EffResetNametagSuffix:
		Patterns:
			[skellett] reset [the] [name][ ]tag suffix [(with|of)] [id] %string%
	EffScoreboardClearSlot:
		Patterns:
			clear (score[ ][board]|board) [display] slot %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	EffSendMap:
		Patterns:
			(show|send|display) [skellett] [custom] map %map% to %players%
	EffSerialze:
		Patterns:
			[skellett] serialize [variable] %object%
	EffSetCollidable:
		Patterns:
			[set] collid(e|able) [state] [of] %entity% to %boolean%
	EffSetInventoryProperty:
		Patterns:
			(set|change) %player%['s] (window|[current] inventory) property [of] %inventoryproperty% to %number%
	EffSetNametagPrefix:
		Patterns:
			[skellett] [(set|make)] prefix [of] [the] [name][ ]tag [(with|of)] [id] %string% to [(string|text)] %string%
	EffSetNametagSuffix:
		Patterns:
			[skellett] [(set|make)] suffix [of] [the] [name][ ]tag [(with|of)] [id] %string% to [(string|text)] %string%
	EffSetWhitelist:
		Patterns:
			[set] white[ ]list [to] %boolean%
	EffShowPlayer:
		Patterns:
			[skellett] show [player] %player% to %players%
	EffSpawnerForce:
		Patterns:
			(make|force) spawner [at] %block% to spawn [[a[n]] entit(y|ies)]
	EffStylishCreate:
		Patterns:
			[skellett] create [a] [new] (stylish|style|simple) [score][ ]board [with] [name[d]] %string%
	EffStylishDelete:
		Patterns:
			[skellett] (delete|remove) [the] (stylish|style|simple) [score][ ][board] [with] [name[d]] %string%
	EffStylishSlotCreate:
		Patterns:
			[skellett] create [a[n]] [new] id [based] [score] [(with [id]|named)] %string% [(with|and)] [(text|string)] %string% [(in|with|for|and)] slot %number% (in|for|of) (stylish|style|simple) [score][ ]board [with] [name[d]] %string%
	EffStylishSlotDelete:
		Patterns:
			[skellett] (delete|remove) [the] id [based] [score] [(with [id]|named)] %string% (in|from|for|of) (stylish|style|simple) [score][ ]board [with] [name[d]] %string%
	EffTeamAddEntry:
		Patterns:
			(score[ ][board]|[skellett[ ]]board) add [the] entry [(from|of)] %string% to [the] [team] %team%
	EffTeamRemoveEntry:
		Patterns:
			[(score[ ][board]|[skellett[ ]]board)] remove [the] entry [(from|of)] %string% from [the] [team] %team%
	EffTitlev1_8_R3:
		Patterns:
			[skellett] (send|show) [a] (1¦subtitle|2¦title) [from] %string% [(with|and) [subtitle] %-string%] (to|for) %players% for %timespan%(,| and| with) %timespan% [fade[ ]in](,| and| with) %timespan% [fade[ ]out]
			[skellett] (send|show) %players% [a] (1¦subtitle|2¦title) [(with|from)] %string% [(with|and) [subtitle] %-string%] for %timespan%(,| and| with) %timespan% [fade[ ]in](,| and| with) %timespan% [fade[ ]out]
	EffUnZip:
		Patterns:
			[skellett] unzip %string% to %string%
	EffUnregisterMap:
		Patterns:
			(erase|clear|remove|delete|unregister) [skellett] map %map%
	EffUnregisterObjective:
		Patterns:
			unregister (score[ ][board]|[skellett[ ]]board) objective %objective%
	EffUnregisterTeam:
		Patterns:
			unregister [the] (score[ ][board]|[skellett[ ]]board) team %team%
	EffUpdateInventory:
		Patterns:
			update [the] (inventory|menu|gui) %inventory%
Expressions:
	ExprAbsoluteValue:
		Return type: Number
		Changers:
			none
		Patterns:
			absolute [value] of %number%
	ExprAbsorptionHearts1_8_R3:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[skellett] absorption hearts of %player%
			[skellett] %player%'s absorption hearts
	ExprActivePotionEffects:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [active] potion[s] [effects] (on|of) %entity%
	ExprAge:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] age of [entity] %entity%
			[entity] %entity%'s age
	ExprAgeLock:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] age lock of [entity] %entity%
			[entity] %entity%'s age lock
	ExprAmountOfDroppedItem:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[skellett] [get] (size|number|amount) of dropped %entity%
	ExprAmountOfItem:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[skellett] (size|number|amount) of item[[ ]stack] %itemstack%
	ExprAmountOfVariables:
		Return type: Number
		Changers:
			none
		Patterns:
			(size|amount) of [all] variables
	ExprArmorStandBody:
		Return type: Object
		Changers:
			none
		Patterns:
			angle of body (from|on) armo[u]r stand %entity%
			armo[u]r stand %entity%['s] body angle
	ExprArmorStandItemBoots:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			armo[u]r stand boots of %entity%
			armo[u]r stand %entity%'s boots
	ExprArmorStandItemChestplate:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			armo[u]r stand chest[ ][plate] of %entity%
			armo[u]r stand %entity%'s chest[ ][plate]
	ExprArmorStandItemHelmet:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			armo[u]r stand (helmet|hat) of %entity%
			armo[u]r stand %entity%'s (helmet|hat)
	ExprArmorStandItemLeggings:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			armo[u]r stand leg[ging][s] of %entity%
			armo[u]r stand %entity%'s leg[ging][s]
	ExprBlockGetDrops:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [possible] drop[(ped|s)] [items] (from|of) [block [at]] %location% [(with|using) %-itemstack%]
	ExprBlockGetPower:
		Return type: integer
		Changers:
			none
		Patterns:
			[redstone] power [[being] receiv(ed|ing)] [(from|at)] %location%
			%location% [redstone] power [[being] received]
	ExprBlockHardness:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] block (break delay|durability|hardness) of [all] %block%
			[all] %block%'s block (break delay|durability|hardness)
	ExprBlockXP:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[dropped] block[[']s] (xp|experience)
	ExprBookAuthor:
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [book['s]] author of %itemstack%
			%itemstack%'s [book] author
	ExprBookPage:
		Return type: Text
		Changers:
			add
			set
			delete
			reset
		Patterns:
			[the] [book['s]] page %number% (of|in) [book] %itemstack%
			%itemstack%'s [book] page %number%
	ExprBookPages:
		Return type: Text
		Changers:
			set
		Patterns:
			[(the|all)] [of] [the] [book] pages [(from|of)] [book] %itemstack%
	ExprBookTitle:
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [book['s]] title of %itemstack%
			%itemstack%'s [book] title
	ExprBreedState:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] breeding state of [entity] %entity%
			[entity] %entity%'s breeding state
	ExprBrewingInventory:
		Return type: brewerinventory
		Changers:
			none
		Patterns:
			[skellett] [event] brew[ing] [stand] inventory
			[skellett] event-brewinginventory
	ExprBrewingInventoryFuel:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			(fuel|burning) [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
			[brew[ing] stand] %brewerinventory%'s (fuel|burning) [item]
	ExprBrewingInventoryFuelTime:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[brew[ing]] fuel time (of|in) [brew[ing] stand] [inventory] %brewerinventory%
			[brew[ing] stand] %brewerinventory%'s [brew[ing]] fuel time
	ExprBrewingInventoryIngredient:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			ingredient [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
			[brew[ing] stand] %brewerinventory%'s ingredient [item]
	ExprBrewingInventoryTime:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[brew[ing]] time (of|in) [brew[ing] stand] [inventory] %brewerinventory%
			[brew[ing] stand] %brewerinventory%'s [brew[ing]] time
	ExprCanvasPixel:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] map pixle [colo[u]r] at [coordinate[s]] [x] %number%(,| and) [y] %number% (on|in) [skellett] map %map%
	ExprChunkOutlineBlocks:
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(the|all)] [of] [the] blocks [in [a[n]]] (around|outlin(e|ing)) [of] chunk %chunk% [[at] [y(-| )coordinate] %-number%]
	ExprClickedAction:
		Return type: Inventory Action
		Changers:
			none
		Patterns:
			(click[ed]|inventory) action
	ExprClickedCursor:
		Return type: Item Type
		Changers:
			none
		Patterns:
			[the] [skellett] [click[ed]] cursor
	ExprClickedInventory:
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			click[ed] inventory
	ExprClickedItem:
		Return type: Item Type
		Changers:
			set
		Patterns:
			[the] [skellett] [click[ed]] item
	ExprClickedRawSlot:
		Return type: Number
		Changers:
			none
		Patterns:
			click[ed] raw slot
	ExprClickedSlot:
		Return type: Number
		Changers:
			none
		Patterns:
			[the] click[ed] slot
	ExprClickedSlotType:
		Return type: clickedslottype
		Changers:
			none
		Patterns:
			click[ed] slot type
	ExprClickedType:
		Return type: clickedtype
		Changers:
			none
		Patterns:
			[the] [skellett] click[ed] type
	ExprClickedTypeNumber:
		Return type: Number
		Changers:
			none
		Patterns:
			click[ed] type num[ber]
	ExprClientBorderCenter:
		Return type: Location
		Changers:
			set
		Patterns:
			[client [side]] [world] border center [location] (for|of) %player%
			%player%'s [client [side]] [world] border center [location]
	ExprClientBorderDamageAmount:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[client [side]] [world] border damage [amount] (for|of) %player%
			%player%'s [client [side]] [world] border damage [amount]
	ExprClientBorderDamageBuffer:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[client [side]] [world] border [damage] buffer (for|of) %player%
			%player%'s [client [side]] [world] border [damage] buffer
	ExprClientBorderSize:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[client [side]] [world] border size (for|of) %player%
			%player%'s [client [side]] [world] border size
	ExprClientBorderWarningDistance:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[client [side]] [world] border warning distance (for|of) %player%
			%player%'s [client [side]] [world] border warning distance
	ExprClientBorderWarningTime:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[client [side]] [world] border warning [time] (for|of) %player%
			%player%'s [client [side]] [world] border warning [time]
	ExprClientWeather:
		Return type: Object
		Changers:
			set
		Patterns:
			[skellett] [client] weather of %player%
	ExprCropState:
		Return type: cropstate
		Changers:
			none
		Patterns:
			crop state of %block%
			%block%'s crop state
	ExprCursorCoordinate:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] map cursor (1¦x|2¦y)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of [[map][ ]cursor] %mapcursor%
	ExprCursorDirection:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] map cursor direction (of|for) [[map][ ]cursor] %mapcursor%
	ExprCursorType:
		Return type: Text
		Changers:
			set
		Patterns:
			[skellett] map cursor type (of|for) [[map][ ]cursor] %mapcursor%
	ExprCursorVisible:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] map cursor visibl(e|ity) [state] (of|for) [[map][ ]cursor] %mapcursor%
	ExprCustomExpression:
		Return type: Object
		Changers:
			none
		Patterns:
			[(execute|parse[d])] [event] method %string% [is [a] loop[able] %-boolean%] [(from|of) [(expression|type)] %-object%] [with parameter[s] %-objects%]
	ExprCustomName:
		Return type: Text
		Changers:
			set
		Patterns:
			[skellett] custom name of %entity%
	ExprCustomNameVisible:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] custom name visib(le|ility) of %entity%
			[skellett] visib(le|ility) of %entity%'s custom name
	ExprDyedArmour:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			[skellett] [dye[d]] [colo[u]r] [of] %itemstack% [to] (colo[u]r[ed]|dyed) %color%
	ExprEnchantmentNumber:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] enchant[ment] level (from|of) %enchantment% (of|in|on) %itemstack%
			[skellett] %itemstack%'s enchant[ment] level (from|of|on) %enchantment%
	ExprEnchantments:
		Return type: Enchantment
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] enchant[ment]s (on|of|from) %itemstack%
	ExprEnderCrystalBase:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[ender] crystal base [visib(le|ility)] [state] of %entity%
			%entity%'s [ender] crystal base [visib(le|ility)] [state]
	ExprEnderCrystalBeam:
		Return type: Location
		Changers:
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[ender] crystal (target|beam) [location] of %entity%
			%entity%'s [ender] crystal (target|beam) [location]
	ExprEntityFarAway:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] [(despawn|remove|clear)] [get] %entity% when [it([']s| is)] far away [state]
	ExprEntityFromUUID:
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[skellett] entity (from [the]|of) (uuid|[universal] unique id) %string%
	ExprEntityID:
		Return type: Number
		Changers:
			none
		Patterns:
			[the] [entity] [number] id (of|from) %entities%
			%entities%'s [entity] [number] id
	ExprEntityUUID:
		Return type: Text
		Changers:
			none
		Patterns:
			[skellett] entity (uuid|[universal] unique id) of [entity] %entity%
			[entity] %entity%'s entity (uuid|[universal] unique id)
	ExprEntries:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] (score[ ][board]|board)[[']s] entr(ies|y[[']s]) [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprEventMap:
		Return type: map
		Changers:
			none
		Patterns:
			[skellett] [the] event[(-| )]map
	ExprExhaustion:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			exhaustion of %player%
			%player%'s exhaustion
	ExprFallDistance:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] fall distance (from|of) %entity%
			%entity%'s fall distance
	ExprFinalDamage:
		Return type: double
		Changers:
			none
		Patterns:
			[skellett] final damage
	ExprFishingGetCaught:
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[skellett] caught (fish|item|entity)
	ExprFishingGetHook:
		Return type: Projectile
		Changers:
			none
		Patterns:
			[skellett] [fish[ing]] hook
	ExprFishingState:
		Return type: fishingstate
		Changers:
			none
		Patterns:
			[skellett] [fish[ing]] state
	ExprFixFishingGetXP:
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] [fish[ing]] (xp|experience) [earned]
	ExprFuseTime:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[skellett] (fuse time|time until blowup) of [the] [primed] [tnt] %entity%
			[skellett] [primed] [tnt] %entity%['s] (fuse time|time until blowup)
	ExprGetEntryScores:
		Return type: scoreboard score
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] (score[ ][board]|[skellett[ ]]board) scores of [entry] %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
			[(the|all)] [of] [the] (score[ ][board]|[skellett[ ]]board) [entry] %string%'s scores [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprGetEntryTeam:
		Return type: scoreboard team
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|board) team of [entry] %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
			[the] (score[ ][board]|board) [entry] %string%'s team [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprGetNametagPrefix:
		Return type: Text
		Changers:
			none
		Patterns:
			[skellett] [get] prefix [of] [the] [name][ ]tag [with] [id] %string%
	ExprGetNametagSuffix:
		Return type: Text
		Changers:
			none
		Patterns:
			[skellett] [get] suffix [of] [the] [name][ ]tag [with] [id] %string%
	ExprGetObjective:
		Return type: scoreboard objective
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprGetScoreboard:
		Return type: scoreboard
		Changers:
			none
		Patterns:
			[get] (score[ ][board]|[skellett[ ]]board)) [(with|named)] [(name|id)] %string%
	ExprGetTeam:
		Return type: scoreboard team
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) %string% team [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
			(score[ ][board]|[skellett[ ]]board) [get] team %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprGroundState:
		Return type: Boolean
		Changers:
			none
		Patterns:
			[(is|are)] [on] [the] ground [state] [of] [entity] %entity%
			[entity] %entity% [(is|are)] [on] [the] ground [state]
	ExprHangingCause:
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [un](hung|hang)[(ed|ing)] cause
	ExprHangingRemover:
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] (hung|hang)[(ed|ing)] remover [entity]
	ExprHideEnchants:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			%itemstacks% with hid(den|ing) enchant[ment][s]
			[skellett] (shiny|hidden enchant[ment][s]|glow|glowing) [item] %itemstack%
	ExprHitboxLength:
		Return type: Number
		Changers:
			none
		Patterns:
			[the] hitbox length of %entity%
			%entity%'s hitbox length
			[the] length of %entity%'s hitbox
	ExprHitboxWidth:
		Return type: Number
		Changers:
			none
		Patterns:
			[the] hitbox width of %entity%
			%entity%'s hitbox width
			[the] width of %entity%'s hitbox
	ExprHotbarSwitchSlot:
		Return type: integer
		Changers:
			none
		Patterns:
			[the] (1¦(past|previous)|2¦(new|future|present)) [changed] (hotbar|held|changed) slot
	ExprImageFile:
		Return type: mapimage
		Changers:
			none
		Patterns:
			[skellett] [the] image (of|from) [the] file [(location|path)] %string%
	ExprInstaBreak:
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[event] inst(ant|a) break [state]
	ExprInventoryRows:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] (gui|menu|inventory|chest|window) row[s] (of|from) %inventory%
			%inventory%'s (gui|menu|inventory|chest|window) row[s]
	ExprInventorySize:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] (gui|menu|inventory|chest|window) (size|number|slots) (of|from) %inventory%
			%inventory%'s (gui|menu|inventory|chest|window) (size|number|slots)
	ExprInventoryType:
		Return type: inventorytype
		Changers:
			none
		Patterns:
			inventory type of %inventory%
			%inventory%'s inventory type
	ExprInventoryViewers:
		Return type: inventoryholder
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [player[']s] view(er[s]|ing) [of] %inventory%
	ExprIsCollidable:
		Return type: Boolean
		Changers:
			none
		Patterns:
			collid(e|able) [state] [of] %entity%
	ExprItemframeItem:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			[skellett] item (in|inside|within|of|from) item[ ]frame %entity%
			[skellett] %entity%'s item[ ]frame item
			[skellett] item[ ]frame %entity%'s item
	ExprItemframeRotation:
		Return type: rotation
		Changers:
			set
		Patterns:
			[skellett] rotation (of|from) item[ ]frame %entity%
			[skellett] %entity%'s item[ ]frame rotation
			[skellett] item[ ]frame %entity%'s rotation
	ExprItemsInSlots:
		Return type: Item / Material
		Changers:
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[items (from|of|in)] slots %numbers% (from|of|in) %inventory%
	ExprItemsWithinEntity:
		Return type: Item / Material
		Changers:
			set
		Patterns:
			[skellett] [get] item[s] (of|in|inside|within) entity %entity%
	ExprMapCenter:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			center (1¦x|2¦z)[( |-)][(position|coord[inate])] (of|from|in) [map] %map%
			%map%'s center (1¦x|2¦z)[( |-)][(position|coord[inate])]
	ExprMapCursors:
		Return type: mapcursor
		Changers:
			none
		Patterns:
			[skellett] [(the|all)] [of] [the] map cursors (in|on|for) [skellett] [map] %map%
	ExprMapScale:
		Return type: mapscale
		Changers:
			set
			reset
		Patterns:
			map (scale|size) of %map%
			map %map%'s (scale|size)
			(scale|size) of map %map%
	ExprMapWorld:
		Return type: World
		Changers:
			set
		Patterns:
			world of map %map%
			map %map%'s world
	ExprMaxDamageTicks:
		Return type: Timespan
		Changers:
			add
			set
			remove
		Patterns:
			[skellett] [maximum] damage delay of %entity%
			[skellett] %entity%'s [maximum] damage delay
	ExprMetadata:
		Return type: Object
		Changers:
			set
			delete
			reset
		Patterns:
			[(skellett|fixed)] meta[ ]data [value] %string% (of|in|within) %object%
	ExprMethods:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [event] methods
	ExprMethodsOfObject:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] methods (from|of|in) [the] [expression] %object%
	ExprNearbyEntities:
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[skellett] [(the|all)] [of] [the] [nearby] entit(y|ies) (within|in) [a] radius [of] %number%[(,| and) %-number%(,| and) %-number%] (within|around|near) %location%
	ExprNewEulerAngle:
		Return type: Object
		Changers:
			none
		Patterns:
			[a] new euler angle
	ExprNewMap:
		Return type: map
		Changers:
			none
		Patterns:
			[skellett] [a] new map[[ ]view] (for|from|with) [world] %world%
	ExprNewMaterial:
		Return type: Object
		Changers:
			none
		Patterns:
			[skellett] new [changed] material
	ExprNewScoreboard:
		Return type: scoreboard
		Changers:
			none
		Patterns:
			[create] [a] new (score[ ][board]|[skellett[ ]]board) [(with|named)] [(name|id)] %string%
	ExprNextEmptySlot:
		Return type: integer
		Changers:
			none
		Patterns:
			(next|first) empty slot of %inventory%
	ExprNoItemNBT:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			%itemstacks% with(out [any]| no) NBT
	ExprNumbersOfString:
		Return type: Text
		Changers:
			none
		Patterns:
			[get] [the] (digit|num[ber])[s] (of|from|in) %string%
	ExprObjectiveCriteria:
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective criteria [of] %objective%
			[the] (score[ ][board]|[skellett[ ]]board) %objective%'s objective criteria
	ExprObjectiveDisplayName:
		Return type: Text
		Changers:
			set
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective display name [(for|from|of)] %objective%
			[the] (score[ ][board]|[skellett[ ]]board) %objective%['s] objective['s] display name
			[the] (score[ ][board]|[skellett[ ]]board) objective %objective%['s] display name
	ExprObjectiveDisplaySlot:
		Return type: Text
		Changers:
			set
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective [display] slot [(for|from|of)] %objective%
			[the] (score[ ][board]|[skellett[ ]]board) %objective%['s] objective['s] [display] slot
			[the] (score[ ][board]|[skellett[ ]]board) objective %objective%['s] [display] slot
	ExprObjectiveGetScore:
		Return type: scoreboard score
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) [objective] %objective%['s] score [(for|from|of)] [entry] %string%
			[the] (score[ ][board]|[skellett[ ]]board) %objective%['s] [objective['s]] score [(for|from|of)] [entry] %string%
	ExprObjectiveName:
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective name [(for|from|of)] %objective%
			[the] (score[ ][board]|[skellett[ ]]board) %objective%['s] objective['s] name
			[the] (score[ ][board]|[skellett[ ]]board) objective %objective%['s] name
	ExprObjectives:
		Return type: scoreboard objective
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [(score[ ][board]|board)[[']s]] objectives [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprObjectivesByCriteria:
		Return type: scoreboard objective
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] (score[ ][board]|board)[[']s] objectives (by|with) [criteria] %string% [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprOfflinePlayers:
		Return type: Offlineplayer
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] offline[ ]player[s]
	ExprOperators:
		Return type: Offlineplayer
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] Op[erator](s|ed) [players]
	ExprPackets:
		Return type: Object
		Changers:
			set
		Patterns:
			[the] [skellett] packet (data|value|field) %string% [[is] [a] loop[able] %-boolean%]
	ExprParticles:
		Return type: Object
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] particle[[ ]types]
	ExprPistonPower:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] piston[s] (power|toggle) [state] of %block%
			%block%'s piston (power|toggle) [state]
	ExprPistonReaction:
		Return type: pistonreaction
		Changers:
			none
		Patterns:
			[the] piston [move] reaction (of|from) %block%
			%block%'s piston [move] reaction
	ExprPlayerInventoryCursor:
		Return type: Item Type
		Changers:
			set
		Patterns:
			[current [inventory]] cursor of %player%
			%player%'s [current [inventory]] cursor
	ExprPlayerPing:
		Return type: Number
		Changers:
			none
		Patterns:
			[skellett] ping of [player] %player%
			[skellett] %player%'s ping
	ExprPlayerScoreboard:
		Return type: scoreboard
		Changers:
			set
			remove
		Patterns:
			(score[ ][board]|[skellett[ ]]board) of [player] %player%
			%player%'s (score[ ][board]|[skellett[ ]]board)
	ExprProjectileBounce:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[skellett] %entity%[[']s] bounc(e|ing) [state]
	ExprRedstoneCurrent:
		Return type: integer
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] [skellett] (1¦(new|future)|2¦(old|past)) [event] [redstone] current
	ExprRegeneratorPos1:
		Return type: Location
		Changers:
			set
		Patterns:
			pos[ition][ ]1 of [skellett] regenerator [[with] id] %string%
	ExprRegeneratorPos2:
		Return type: Location
		Changers:
			set
		Patterns:
			pos[ition][ ]2 of [skellett] regenerator [[with] id] %string%
	ExprRegenerators:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] [skellett] regenerator[s] [ids]
	ExprRemoveItemNBT:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			%itemstacks% with [all] removed NBT
			remove[ed] [all] NBT [from] %itemstacks%
	ExprRepeaterDelay:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] [redstone] repeater[s] [(redstone|power)] delay of %block%
			[redstone] repeater %block%'s [(redstone|power)] delay
	ExprReturnType:
		Return type: Object
		Changers:
			none
		Patterns:
			[(|skript|skellett)] [the] return (type[s]|value[s]) [(from|of|in)] [the] [expression] %object%
	ExprRoundDecimal:
		Return type: Number
		Changers:
			none
		Patterns:
			[Skellett] %number% round[ed] [to] [the] [nearest] %number% decimal (digit[s]|place[s])
	ExprScore:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) (score|number|slot) [(for|from|of)] %score%
			(score[ ][board]|[skellett[ ]]board) %score%'s (score|number|slot)
	ExprScoreEntry:
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) [get] entry [(for|from|of)] score %score%
			(score[ ][board]|[skellett[ ]]board) %score%'s score entry
	ExprScoreObjective:
		Return type: scoreboard objective
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) objective [(for|from|of)] score %score%
			[the] (score[ ][board]|[skellett[ ]]board) %score%'s scores objective
	ExprShootArrowSpeed:
		Return type: float
		Changers:
			none
		Patterns:
			(arrow|shot|velocity) speed [of (shot|arrow)]
	ExprShootGetArrow:
		Return type: Entity
		Changers:
			set
		Patterns:
			[the] [skellett] [(event|get)] [the] shot (arrow|projectile)
	ExprShootGetBow:
		Return type: Item / Material
		Changers:
			none
		Patterns:
			[the] [skellett] [(event|get)] bow
	ExprSleepIgnored:
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			ignored sleep[ing] [state] of %player%
	ExprSlimeSize:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[skellett] slime size of %entity%
			[skellett] %entity%'s slime size
	ExprSneakState:
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			sneak[ing] [state] of %player%
	ExprSpawnReason:
		Return type: spawnreason
		Changers:
			none
		Patterns:
			[the] spawn reason
	ExprSpawnerDelay:
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			delay (of|from) spawner [at] %block%
			%block%'s spawn[er] delay
			spawn[er] delay (of|from) %block%
	ExprSpawnerType:
		Return type: Text
		Changers:
			set
		Patterns:
			(entity|mob|creature) [type] (of|from) spawner [at] %block%
			%block%'s spawn[er] (entity|mob|creature) [type]
	ExprSpectate:
		Return type: Entity
		Changers:
			set
			remove
			delete
			reset
		Patterns:
			(spec[tat(e|or|ing)]|view[ing]) [(target|state)] of %player%
			%player%'s (spec[tat(e|or|ing)]|view[ing]) [(target|state)]
	ExprSpreadSource:
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[spread] source block
	ExprSprintState:
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			(sprint|run)[ing] [state] of %player%
	ExprStatistics:
		Return type: Number
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] stat[istic][s] %string% (of|from) %player% [[(with|from|for|of)] entity[[ ]type] %-string%] [[(with|from|for|of)] material %-string%]
	ExprStylishPlayerBoard:
		Return type: scoreboard
		Changers:
			set
			reset
		Patterns:
			[the] (stylish|style|simple) [score][ ][board] of %player%
			%player%'s (stylish|style|simple) [score][ ][board]
	ExprStylishSlotBoard:
		Return type: scoreboard
		Changers:
			set
		Patterns:
			[skellett] [(update|edit)] [the] [(stylish|style|simple)] [score][ ]board [of] id [based] [score] [(with [id]|named)] %string%
	ExprStylishSlotNumber:
		Return type: Number
		Changers:
			set
		Patterns:
			[skellett] [(update|edit)] [the] slot [of] id [based] [score] [(with [id]|named)] %string%
	ExprStylishSlotText:
		Return type: Text
		Changers:
			set
		Patterns:
			[skellett] [(update|edit)] [the] (text|name|display|data|string) [of] id [based] [score] [(with [id]|named)] %string%
	ExprStylishTitle:
		Return type: Text
		Changers:
			set
		Patterns:
			[skellett] [(update|edit)] [the] [display] title of (stylish|style|simple) [score][ ][board] [named] %string%
			[skellett] [(update|edit)] [the] (stylish|style|simple) [score][ ][board] %string%['s] [display] title
	ExprTargetReason:
		Return type: targetreason
		Changers:
			none
		Patterns:
			[the] target reason
	ExprTeamDisplayName:
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [(score[ ][board]|[skellett[ ]]board)] team display name [(for|from|of)] %team%
	ExprTeamEntries:
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] (score[ ][board]|[skellett[ ]]board)[[']s] entr(ies|y[[']s]) (in|within) [the] [team] %team%
	ExprTeamFriendlyFire:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] [(score[ ][board]|[skellett[ ]]board)] friendly [fire] state [(for|of)] [team] %team%
	ExprTeamFriendlyInvisibles:
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board) [friendly] invisible[s] [state] [(for|of)] [team] %team%
	ExprTeamName:
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (score[ ][board]|[skellett[ ]]board)) [team] name [(for|of)] [team] %team%
	ExprTeamPrefix:
		Return type: Text
		Changers:
			set
		Patterns:
			[(score[ ][board]|[skellett[ ]]board)] [team] prefix [(for|of)] [team] %team%
	ExprTeamSize:
		Return type: Number
		Changers:
			none
		Patterns:
			[(score[ ][board]|[skellett[ ]]board)] team size [(for|of)] [team] %team%
	ExprTeamSuffix:
		Return type: Text
		Changers:
			set
		Patterns:
			[(score[ ][board]|[skellett[ ]]board)] [team] suffix [(for|of)] [team] %team%
	ExprTeams:
		Return type: scoreboard team
		Changers:
			none
		Patterns:
			[(the|all)] [of] [the] teams [[(in|from)] (score[ ][board]|[skellett[ ]]board) [%-scoreboard%]]
	ExprTeleportCause:
		Return type: teleportcause
		Changers:
			none
		Patterns:
			[the] teleport cause
	ExprTick:
		Return type: Number
		Changers:
			none
		Patterns:
			[the] server tick[s]
			[the] server's tick[s]
			[the] tick[s] of [the] server
	ExprUnleashHitch:
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			event-hitch
	ExprUnleashReason:
		Return type: unleashreason
		Changers:
			none
		Patterns:
			(un(leash|lead)|(leash|lead) break) reason
	ExprWorldChangeFrom:
		Return type: World
		Changers:
			none
		Patterns:
			(previous|past) [changed] world
	ExprWorldOfLocation:
		Return type: World
		Changers:
			set
		Patterns:
			[skellett] world (of|from) [location] %location%