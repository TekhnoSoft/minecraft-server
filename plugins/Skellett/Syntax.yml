# Skellett the addon with the beast name!
# By LimeGlass
# 
# This file generates all new syntax registered for Skellett.
# 
# Currently working on making this editable and also adding every single syntax to auto generate in it

Operators:
- '[(the|all)] [of] [the] Op[erator](s|ed) [players]'
Syntax:
  Events:
    Hanging:
    - '[the] [un](hung|hang)[(ed|ing)] cause'
    - '[the] (hung|hang)[(ed|ing)] remover [entity]'
Main:
  Shooting:
  - '[the] [skellett] [(event|get)] bow'
  - '[the] [skellett] [(event|get)] [the] shot (arrow|projectile)'
  - (arrow|shot|velocity) speed [of (shot|arrow)]
  Maps:
  - '[skellett] [the] event[(-| )]map'
  - '[skellett] [the] image (of|from) [the] file [(location|path)] %string%'
  - world of map %map%
  - map %map%'s world
  - "[skellett] regenerator with id %string% (1\xc2\xa6does|2\xc2\xa6does(n't| not))\
    \ exist"
  - '[skellett] [(the|all)] [of] [the] map cursors (in|on|for) [skellett] [map] %map%'
  - '[skellett] map cursor direction (of|for) [[map][ ]cursor] %mapcursor%'
  - (manage|override|overwrite|create) [skellett] map %map% [[and] [with] override %-boolean%]
  - '[skellett] [a] new map[[ ]view] (for|from|with) [world] %world%'
  - '[skellett] map cursor visibl(e|ity) [state] (of|for) [[map][ ]cursor] %mapcursor%'
  - '[skellett] map cursor type (of|for) [[map][ ]cursor] %mapcursor%'
  - draw [map] cursor %string% pointing %number% at [coordinate[s]] [x] %number%(,| and) [y] %number% on [skellett] map %map%
  - "[map] %map% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) virtual"
  - draw [buffered] image %mapimage% [at [coordinate[s]] [x] %number%(,| and) [y] %number%] on [skellett] map %map%
  - '[skellett] map pixle [colo[u]r] at [coordinate[s]] [x] %number%(,| and) [y] %number%
    (on|in) [skellett] map %map%'
  - (erase|clear|remove|delete|unregister) [skellett] map %map%
  - "[skellett] map cursor (1\xc2\xa6x|2\xc2\xa6y)(-| )(coord[inate]|pos[ition]|loc[ation])[s]\
    \ of [[map][ ]cursor] %mapcursor%"
  - (show|send|display) [skellett] [custom] map %map% to %players%
  - draw text %string% at [coordinate[s]] [x] %number%(,| and) [y] %number% on [skellett] map %map%
  - "center (1\xc2\xa6x|2\xc2\xa6z)[( |-)][(position|coord[inate])] (of|from|in) [map]\
    \ %map%"
  - "%map%'s center (1\xc2\xa6x|2\xc2\xa6z)[( |-)][(position|coord[inate])]"
  - map (scale|size) of %map%
  - map %map%'s (scale|size)
  - (scale|size) of map %map%
  - "[map] %map% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) being handled [by skellett]"
  - "[skellett] map cursor (1\xa6x|2\xa6y)(-| )(coord[inate]|pos[ition]|loc[ation])[s]\
    \ of [[map][ ]cursor] %mapcursor%"
  - "center (1\xa6x|2\xa6z)[( |-)][(position|coord[inate])] (of|from|in) [map] %map%"
  - "%map%'s center (1\xa6x|2\xa6z)[( |-)][(position|coord[inate])]"
  - "[map] %map% (1\xa6is|2\xa6is(n't| not)) being handled [by skellett]"
  - "[skellett] regenerator with id %string% (1\xa6does|2\xa6does(n't| not)) exist"
  - "[map] %map% (1\xa6is|2\xa6is(n't| not)) virtual"
  ArmorStands:
  - '[a] new euler angle'
  - angle of body (from|on) armo[u]r stand %entity%
  - armo[u]r stand %entity%['s] body angle
  - armo[u]r stand boots of %entity%
  - armo[u]r stand %entity%'s boots
  - armo[u]r stand (helmet|hat) of %entity%
  - armo[u]r stand %entity%'s (helmet|hat)
  - armo[u]r stand chest[ ][plate] of %entity%
  - armo[u]r stand %entity%'s chest[ ][plate]
  - armo[u]r stand leg[ging][s] of %entity%
  - armo[u]r stand %entity%'s leg[ging][s]
  StylishBoards:
  - '[skellett] [(update|edit)] [the] [(stylish|style|simple)] [score][ ]board [of]
    id [based] [score] [(with [id]|named)] %string%'
  - '[skellett] [(update|edit)] [the] (text|name|display|data|string) [of] id [based]
    [score] [(with [id]|named)] %string%'
  - '[skellett] create [a[n]] [new] id [based] [score] [(with [id]|named)] %string%
    [(with|and)] [(text|string)] %string% [(in|with|for|and)] slot %number% (in|for|of)
    (stylish|style|simple) [score][ ]board [with] [name[d]] %string%'
  - '[skellett] (delete|remove) [the] id [based] [score] [(with [id]|named)] %string%
    (in|from|for|of) (stylish|style|simple) [score][ ]board [with] [name[d]] %string%'
  - "(stylish|style|simple) [score][ ]board %string% (1\xc2\xa6(is set|[does] exist[s])|2\xc2\
    \xa6(is(n't| not) set|does(n't| not) exist[s]))"
  - '[skellett] (delete|remove) [the] (stylish|style|simple) [score][ ][board] [with]
    [name[d]] %string%'
  - '[skellett] create [a] [new] (stylish|style|simple) [score][ ]board [with] [name[d]]
    %string%'
  - '[skellett] [(update|edit)] [the] [display] title of (stylish|style|simple) [score][
    ][board] [named] %string%'
  - '[skellett] [(update|edit)] [the] (stylish|style|simple) [score][ ][board] %string%[''s]
    [display] title'
  - '[skellett] [(update|edit)] [the] slot [of] id [based] [score] [(with [id]|named)]
    %string%'
  - '[the] (stylish|style|simple) [score][ ][board] of %player%'
  - '%player%''s (stylish|style|simple) [score][ ][board]'
  - "(stylish|style|simple) [score][ ]board %string% (1\xa6(is set|[does] exist[s])|2\xa6\
    (is(n't| not) set|does(n't| not) exist[s]))"
  ClientWorldBorders:
  - '[client [side]] [world] border [damage] buffer (for|of) %player%'
  - '%player%''s [client [side]] [world] border [damage] buffer'
  - '[client [side]] [world] border warning distance (for|of) %player%'
  - '%player%''s [client [side]] [world] border warning distance'
  - '[client [side]] [world] border damage [amount] (for|of) %player%'
  - '%player%''s [client [side]] [world] border damage [amount]'
  - '[client [side]] [world] border warning [time] (for|of) %player%'
  - '%player%''s [client [side]] [world] border warning [time]'
  - '[client [side]] [world] border center [location] (for|of) %player%'
  - '%player%''s [client [side]] [world] border center [location]'
  - '[client [side]] [world] border size (for|of) %player%'
  - '%player%''s [client [side]] [world] border size'
  Packets:
  - '[the] [skellett] packet (data|value|field) %string% [[is] [a] loop[able] %-boolean%]'
  ReturnType:
  - '[(the|all)] [of] [the] methods (from|of|in) [the] [expression] %object%'
  - '[(the|all)] [of] [the] [event] methods'
  - '[(execute|parse[d])] [event] method %string% [is [a] loop[able] %-boolean%] [(from|of)
    [(expression|type)] %-object%] [with parameter[s] %-objects%]'
  - '[(|skript|skellett)] [the] return (type[s]|value[s]) [(from|of|in)] [the] [expression]
    %object%'
  Files:
  - '[skellett] d[elete][ ][f][ile] %string%'
  - '[skellett] unzip %string% to %string%'
  - '[skellett] c[reate][ ][f][ile] %string%'
  Spawners:
  - delay (of|from) spawner [at] %block%
  - '%block%''s spawn[er] delay'
  - spawn[er] delay (of|from) %block%
  - (make|force) spawner [at] %block% to spawn [[a[n]] entit(y|ies)]
  - (entity|mob|creature) [type] (of|from) spawner [at] %block%
  - '%block%''s spawn[er] (entity|mob|creature) [type]'
  Books:
  - open book %itemstack% to %player%
  - '[(the|all)] [of] [the] [book] pages [(from|of)] [book] %itemstack%'
  - "book %itemstack% (1\xc2\xa6(ha(s[n[']t]|ve)|contain[s])|2\xc2\xa6(do[es](n't|\
    \ not) have| do[es](n't| not) contain)) [had] [an] [book [meta]] author"
  - '[the] [book[''s]] author of %itemstack%'
  - '%itemstack%''s [book] author'
  - '[the] [book[''s]] page %number% (of|in) [book] %itemstack%'
  - '%itemstack%''s [book] page %number%'
  - '[the] [book[''s]] title of %itemstack%'
  - '%itemstack%''s [book] title'
  - "book %itemstack% (1\xc2\xa6(ha(s[n[']t]|ve)|contain[s])|2\xc2\xa6(do[es](n't|\
    \ not) have| do[es](n't| not) contain)) [had] [a] [book [meta]] title"
  - add [a] page [with] [(text|data)] [%-string%] to [book] %itemstack%
  - "book %itemstack% (1\xa6(ha(s[n[']t]|ve)|contain[s])|2\xa6(do[es](n't| not) have|\
    \ do[es](n't| not) contain)) [had] [a] [book [meta]] title"
  - "book %itemstack% (1\xa6(ha(s[n[']t]|ve)|contain[s])|2\xa6(do[es](n't| not) have|\
    \ do[es](n't| not) contain)) [had] [an] [book [meta]] author"
  Regenerator:
  - pos[ition][ ]1 of [skellett] regenerator [[with] id] %string%
  - (create|make) [a] [new] [skellett] regenerator with ID %string% (from|within) [location[s]] %location% (to|and) %location%
  - re(generate|[ ]build) [the] [skellett] regenerator with ID %string%
  - (delete|remove) [the] [skellett] regenerator with ID %string% [re[ ]build %-boolean%]
  - '[(the|all)] [of] [the] [skellett] regenerator[s] [ids]'
  - pos[ition][ ]2 of [skellett] regenerator [[with] id] %string%
  - re[ ]configure [the] [skellett] regenerator with ID %string%
  Nametags:
  - '[skellett] [get] prefix [of] [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] [(create|set|make)] [a] [name][ ]tag [ID] [(with|named)] [(name|string|text|id)]
    %string% [(with|from) [player] %-player%]'
  - '[skellett] reset [the] [name][ ]tag prefix [(with|of)] [id] %string%'
  - '[skellett] add %player% to [the] [name][ ]tag [(with|of)] [id] %string% [(with|from)
    [[score][ ]board] %-scoreboard%]'
  - '[skellett] reset [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] [get] suffix [of] [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] [(set|make)] suffix [of] [the] [name][ ]tag [(with|of)] [id] %string%
    to [(string|text)] %string%'
  - '[skellett] remove %player% from [the] [name][ ]tag [(with|of)] [id] %string%'
  - '[skellett] [(set|make)] prefix [of] [the] [name][ ]tag [(with|of)] [id] %string%
    to [(string|text)] %string%'
  - '[skellett] delete [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] reset [the] [name][ ]tag suffix [(with|of)] [id] %string%'
  Brewing:
  - '[brew[ing]] fuel time (of|in) [brew[ing] stand] [inventory] %brewerinventory%'
  - '[brew[ing] stand] %brewerinventory%''s [brew[ing]] fuel time'
  - '[skellett] [event] brew[ing] [stand] inventory'
  - '[skellett] event-brewinginventory'
  - ingredient [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
  - '[brew[ing] stand] %brewerinventory%''s ingredient [item]'
  - (fuel|burning) [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
  - '[brew[ing] stand] %brewerinventory%''s (fuel|burning) [item]'
  - '[brew[ing]] time (of|in) [brew[ing] stand] [inventory] %brewerinventory%'
  - '[brew[ing] stand] %brewerinventory%''s [brew[ing]] time'
  Fishing:
  - '[skellett] caught (fish|item|entity)'
  - '[the] [fish[ing]] (xp|experience) [earned]'
  - '[skellett] [fish[ing]] hook'
  - '[skellett] [fish[ing]] state'
  Jukebox:
  - "juke[ ]box %block% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) playing [a] (record|track|song)"
  - "juke[ ]box %block% (1\xa6is|2\xa6is(n't| not)) playing [a] (record|track|song)"
Exhaustion:
- exhaustion of %player%
- '%player%''s exhaustion'
ServerTick:
- '[the] server tick[s]'
- '[the] server''s tick[s]'
- '[the] tick[s] of [the] server'
SleepIgnored:
- ignored sleep[ing] [state] of %player%
Adult:
- "[entity] %entity% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) [a[n]] adult"
- "[entity] %entity% (1\xa6is|2\xa6is(n't| not)) [a[n]] adult"
CenterMessage:
- (message|send [message]) center[ed] %strings% to %players% [[with[ text]] %-string%]
MathExpressions:
- absolute [value] of %number%
InWater:
- "[entity] %entity% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) in water"
- "[entity] %entity% (1\xa6is|2\xa6is(n't| not)) in water"
EnderCrystalBeam:
- '[ender] crystal (target|beam) [location] of %entity%'
- '%entity%''s [ender] crystal (target|beam) [location]'
EntityUUID:
- '[skellett] entity (uuid|[universal] unique id) of [entity] %entity%'
- '[entity] %entity%''s entity (uuid|[universal] unique id)'
- '[skellett] entity (from [the]|of) (uuid|[universal] unique id) %string%'
GetParticles:
- '[(the|all)] [of] [the] particle[[ ]types]'
BabyAdult:
- "[(make|set)] [entity] %entity% [to] [a[n]] (1\xc2\xa6baby|2\xc2\xa6adult)"
- "[(make|set)] [entity] %entity% [to] [a[n]] (1\xa6baby|2\xa6adult)"
EnderCrystalBase:
- '[ender] crystal base [visib(le|ility)] [state] of %entity%'
- '%entity%''s [ender] crystal base [visib(le|ility)] [state]'
ViewingCredits:
- "[player] %player% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) viewing [the] credits"
- "[player] %player% (1\xa6is|2\xa6is(n't| not)) viewing [the] credits"
CustomName:
- '[skellett] custom name visib(le|ility) of %entity%'
- '[skellett] visib(le|ility) of %entity%''s custom name'
- '[skellett] custom name of %entity%'
CollidableState:
- '[set] collid(e|able) [state] [of] %entity% to %boolean%'
ItemframeItem:
- '[skellett] item (in|inside|within|of|from) item[ ]frame %entity%'
- '[skellett] %entity%''s item[ ]frame item'
- '[skellett] item[ ]frame %entity%''s item'
BreedState:
- '[skellett] breeding state of [entity] %entity%'
- '[entity] %entity%''s breeding state'
PlayerCanSee:
- "[player] %player% (1\xc2\xa6can|2\xc2\xa6can([ ]no|')t) see [player] %player%"
- "[player] %player% (1\xa6can|2\xa6can([ ]no|')t) see [player] %player%"
SpreadSource:
- '[spread] source block'
BreakBlockNaturally:
- '[skellett] break %block% [naturally] [(with|using) %-itemstack%]'
- '[skellett] [naturally] break %block% [(with|using) %-itemstack%]'
Statistics:
- '[the] stat[istic][s] %string% (of|from) %player% [[(with|from|for|of)] entity[[
  ]type] %-string%] [[(with|from|for|of)] material %-string%]'
Metadata:
- '[(skellett|fixed)] meta[ ]data [value] %string% (of|in|within) %object%'
SpawnReason:
- '[the] spawn reason'
PlayerWindowProperty:
- (set|change) %player%['s] (window|[current] inventory) property [of] %inventoryproperty% to %number%
ClearSlot:
- (clear|empty|reset) (inventory|menu|gui) [slot %-integer%] [(of|in)] %inventory%
ClickedCursor:
- '[the] [skellett] [click[ed]] cursor'
SizeOfInventory:
- '[skellett] (gui|menu|inventory|chest|window) (size|number|slots) (of|from) %inventory%'
- '%inventory%''s (gui|menu|inventory|chest|window) (size|number|slots)'
BetterPotion:
- '[skellett] apply [potion[s]] [of] %potioneffecttype% [potion] [[[of] tier] %-number%]
  to %livingentities% [for %-timespan%] [[and] ambient %-boolean% [hide [particle
  [effects] %-boolean% [colo[u]r %-color%]]]]'
PistonReaction:
- '[the] piston [move] reaction (of|from) %block%'
- '%block%''s piston [move] reaction'
TitleAndSubtitle:
- "[skellett] (send|show) [a] (1\xc2\xa6subtitle|2\xc2\xa6title) [from] %string% [(with|and)\
  \ [subtitle] %-string%] (to|for) %players% for %timespan%(,| and| with) %timespan%\
  \ [fade[ ]in](,| and| with) %timespan% [fade[ ]out]"
- "[skellett] (send|show) %players% [a] (1\xc2\xa6subtitle|2\xc2\xa6title) [(with|from)]\
  \ %string% [(with|and) [subtitle] %-string%] for %timespan%(,| and| with) %timespan%\
  \ [fade[ ]in](,| and| with) %timespan% [fade[ ]out]"
- "[skellett] (send|show) [a] (1\xa6subtitle|2\xa6title) [from] %string% [(with|and)\
  \ [subtitle] %-string%] (to|for) %players% for %timespan%(,| and| with) %timespan%\
  \ [fade[ ]in](,| and| with) %timespan% [fade[ ]out]"
- "[skellett] (send|show) %players% [a] (1\xa6subtitle|2\xa6title) [(with|from)] %string%\
  \ [(with|and) [subtitle] %-string%] for %timespan%(,| and| with) %timespan% [fade[\
  \ ]in](,| and| with) %timespan% [fade[ ]out]"
ItemInSlots:
- '[items (from|of|in)] slots %numbers% (from|of|in) %inventory%'
NoNBT:
- '%itemstacks% with hid(den|ing) enchant[ment][s]'
- '[skellett] (shiny|hidden enchant[ment][s]|glow|glowing) [item] %itemstack%'
- '%itemstacks% with [all] removed NBT'
- remove[ed] [all] NBT [from] %itemstacks%
- '%itemstacks% with(out [any]| no) NBT'
ItemsWithin:
- '[skellett] [get] item[s] (of|in|inside|within) entity %entity%'
SlimeSize:
- '[skellett] slime size of %entity%'
- '[skellett] %entity%''s slime size'
PlayerInventoryCursor:
- '[current [inventory]] cursor of %player%'
- '%player%''s [current [inventory]] cursor'
BlockStates:
- '[redstone] power [[being] receiv(ed|ing)] [(from|at)] %location%'
- '%location% [redstone] power [[being] received]'
- '[(the|all)] [of] [the] [possible] drop[(ped|s)] [items] (from|of) [block [at]]
  %location% [(with|using) %-itemstack%]'
InventoryType:
- inventory type of %inventory%
- '%inventory%''s inventory type'
ClickedItem:
- '[the] [skellett] [click[ed]] item'
EntityRemoveWhenFarAway:
- '[skellett] [(despawn|remove|clear)] [get] %entity% when [it(['']s| is)] far away
  [state]'
ClickedSlotType:
- click[ed] slot type
EntityEffect:
- '[skellett] (make|force) %entity% [to] [(perform|do)] [entity] effect %entityeffect%'
Download:
- '[skellett] d[ownload][l] [from] [url] %string% to %string%'
TeleportPlayerWorldSpawn:
- teleport %players% to [world] spawn (of|in) [world] %string%
- '[skellett] teleport %players% to world %string% [spawn]'
ItemframeRotation:
- '[skellett] rotation (of|from) item[ ]frame %entity%'
- '[skellett] %entity%''s item[ ]frame rotation'
- '[skellett] item[ ]frame %entity%''s rotation'
RedstoneCurrent:
- "[the] [skellett] (1\xc2\xa6(new|future)|2\xc2\xa6(old|past)) [event] [redstone]\
  \ current"
- "[the] [skellett] (1\xa6(new|future)|2\xa6(old|past)) [event] [redstone] current"
SneakingState:
- sneak[ing] [state] of %player%
AgeLock:
- '[skellett] age lock of [entity] %entity%'
- '[entity] %entity%''s age lock'
Chunks:
- '[skellett] load chunk %chunk% [[with] generat(e|ing) %-boolean%]'
- '[skellett] unload chunk %chunk% [[with] sav(e|ing) %-boolean%]'
ChunkOutlineBlocks:
- '[(the|all)] [of] [the] blocks [in [a[n]]] (around|outlin(e|ing)) [of] chunk %chunk%
  [[at] [y(-| )coordinate] %-number%]'
BlockHardness:
- '[the] block (break delay|durability|hardness) of [all] %block%'
- '[all] %block%''s block (break delay|durability|hardness)'
MaxDamageTicks:
- '[skellett] [maximum] damage delay of %entity%'
- '[skellett] %entity%''s [maximum] damage delay'
Dyed:
- '[skellett] [dye[d]] [colo[u]r] [of] %itemstack% [to] (colo[u]r[ed]|dyed) %color%'
ClickedInventory:
- click[ed] inventory
ClientWeather:
- '[skellett] [client] weather of %player%'
AbsorptionHearts:
- '[skellett] absorption hearts of %player%'
- '[skellett] %player%''s absorption hearts'
NearbyEntities:
- '[skellett] [(the|all)] [of] [the] [nearby] entit(y|ies) (within|in) [a] radius
  [of] %number%[(,| and) %-number%(,| and) %-number%] (within|around|near) %location%'
NextEmptySlot:
- (next|first) empty slot of %inventory%
UpdateInventory:
- update [the] (inventory|menu|gui) %inventory%
HideShowPlayers:
- '[skellett] hide [player] %player% from %player%'
- '[skellett] show [player] %player% to %players%'
ClickedType:
- '[the] [skellett] click[ed] type'
AmountOfItem:
- '[skellett] [get] (size|number|amount) of dropped %entity%'
- '[skellett] (size|number|amount) of item[[ ]stack] %itemstack%'
PistonSticky:
- "[piston] %block% (1\xc2\xa6is|2\xc2\xa6is(n't| not)) [a] sticky [piston]"
- "[piston] %block% (1\xa6is|2\xa6is(n't| not)) [a] sticky [piston]"
EnchantmentLevel:
- '[skellett] enchant[ment] level (from|of) %enchantment% (of|in|on) %itemstack%'
- '[skellett] %itemstack%''s enchant[ment] level (from|of|on) %enchantment%'
RepeaterDelay:
- '[skellett] [redstone] repeater[s] [(redstone|power)] delay of %block%'
- '[redstone] repeater %block%''s [(redstone|power)] delay'
ClickedAction:
- (click[ed]|inventory) action
PlayerPing:
- '[skellett] ping of [player] %player%'
- '[skellett] %player%''s ping'
LocationWorld:
- '[skellett] world (of|from) [location] %location%'
HitboxSize:
- '[the] hitbox width of %entity%'
- '%entity%''s hitbox width'
- '[the] width of %entity%''s hitbox'
- '[the] hitbox length of %entity%'
- '%entity%''s hitbox length'
- '[the] length of %entity%''s hitbox'
FallDistance:
- '[the] fall distance (from|of) %entity%'
- '%entity%''s fall distance'
Sound:
- "[skellett] play [(skellett|better)] [sound] (1\xc2\xa6%-sound%|2\xc2\xa6%-string%)\
  \ (for|to) %players% (with|at|and) volume %number% (and|with|at) pitch %number%"
- "[skellett] play [(skellett|better)] [sound] (1\xc2\xa6%-sound%|2\xc2\xa6%-string%)\
  \ at %locations% (with|at|and) volume %number% (and|with|at) pitch %number%"
- "[skellett] play [(skellett|better)] [sound] (1\xa6%-sound%|2\xa6%-string%) at %locations%\
  \ (with|at|and) volume %number% (and|with|at) pitch %number%"
- "[skellett] play [(skellett|better)] [sound] (1\xa6%-sound%|2\xa6%-string%) (for|to)\
  \ %players% (with|at|and) volume %number% (and|with|at) pitch %number%"
Serialize:
- '[skellett] serialize [variable] %object%'
ClickedSlot:
- '[the] click[ed] slot'
ActivePotionEffects:
- '[(the|all)] [of] [the] [active] potion[s] [effects] (on|of) %entity%'
TeleportCause:
- '[the] teleport cause'
LeashBlock:
- (leash|lead) %livingentities% to %block%
Age:
- '[skellett] age of [entity] %entity%'
- '[entity] %entity%''s age'
Breed:
- "[entity] %entity% (1\xc2\xa6can|2\xc2\xa6can([ ]no|')t) [be] breed"
- "[entity] %entity% (1\xa6can|2\xa6can([ ]no|')t) [be] breed"
CropState:
- crop state of %block%
- '%block%''s crop state'
AmountOfVariables:
- (size|amount) of [all] variables
InstaBreak:
- '[event] inst(ant|a) break [state]'
PistonPower:
- '[skellett] piston[s] (power|toggle) [state] of %block%'
- '%block%''s piston (power|toggle) [state]'
InventoryViewers:
- '[(the|all)] [of] [the] [player['']s] view(er[s]|ing) [of] %inventory%'
EntityID:
- '[the] [entity] [number] id (of|from) %entities%'
- '%entities%''s [entity] [number] id'
BlockConstructor:
- (create|start|make|build|construct) %string% with %itemtype% at %location% [[with effect[s]] %-boolean%]
ProjectileBounce:
- '[skellett] %entity%[['']s] bounc(e|ing) [state]'
Whitelist:
- reload [the] white[ ]list
- '[set] white[ ]list [to] %boolean%'
GroundState:
- '[(is|are)] [on] [the] ground [state] [of] [entity] %entity%'
- '[entity] %entity% [(is|are)] [on] [the] ground [state]'
FinalDamage:
- '[skellett] final damage'
EnchantsOnItem:
- '[(the|all)] [of] [the] enchant[ment]s (on|of|from) %itemstack%'
EventCancelled:
- "[(the|this)] event (1\xc2\xa6is|2\xc2\xa6is(n't| not)) cancelled"
- "[(the|this)] event (1\xa6is|2\xa6is(n't| not)) cancelled"
RoundDecimal:
- '[Skellett] %number% round[ed] [to] [the] [nearest] %number% decimal (digit[s]|place[s])'
InventoryRows:
- '[skellett] (gui|menu|inventory|chest|window) row[s] (of|from) %inventory%'
- '%inventory%''s (gui|menu|inventory|chest|window) row[s]'
OfflinePlayers:
- '[(the|all)] [of] [the] offline[ ]player[s]'
ClickedTypeNumber:
- click[ed] type num[ber]
ForceRespawn:
- '[skellett] [force] respawn [of] %player%'
- '[skellett] force [the] %player% to respawn'
OpenInventory:
- '[skellett] open [[better] inventory [type]] %string% [with %-number% row[s]] [named
  %-string%] to %players%'
Spectate:
- (spec[tat(e|or|ing)]|view[ing]) [(target|state)] of %player%
- '%player%''s (spec[tat(e|or|ing)]|view[ing]) [(target|state)]'
TNTFuseTime:
- '[skellett] (fuse time|time until blowup) of [the] [primed] [tnt] %entity%'
- '[skellett] [primed] [tnt] %entity%[''s] (fuse time|time until blowup)'
RedstonePower:
- "[block] %block% (1\xc2\xa6(is|has)|2\xc2\xa6(is|has)(n't| not)) [got] [redstone]\
  \ powered"
- "[block] %block% (1\xa6(is|has)|2\xa6(is|has)(n't| not)) [got] [redstone] powered"
SprintingState:
- (sprint|run)[ing] [state] of %player%
ClickedRawSlot:
- click[ed] raw slot
Actionbar:
- (send|show) [a[n]] action[ ]bar [(with|from)] [string] %string% to %players%
NumbersInString:
- '[get] [the] (digit|num[ber])[s] (of|from|in) %string%'
ClientChest:
- "[skellett] (1\xc2\xa6open|2\xc2\xa6close) [the] %block% for %players%"
- "[skellett] make [the] %block% (appear|look) (1\xc2\xa6open|2\xc2\xa6closed) for\
  \ %players%"
- "[skellett] play chest (1\xc2\xa6open|2\xc2\xa6close) animation at %block% for %players%"
- "[skellett] (1\xa6open|2\xa6close) [the] %block% for %players%"
- "[skellett] make [the] %block% (appear|look) (1\xa6open|2\xa6closed) for %players%"
- "[skellett] play chest (1\xa6open|2\xa6close) animation at %block% for %players%"
ScoreboardExists:
- "score[ ][board] %string% (1\xc2\xa6(is set|[does] exist[s])|2\xc2\xa6(is(n't| not)\
  \ set|does(n't| not) exist[s]))"
- "score[ ][board] %string% (1\xa6(is set|[does] exist[s])|2\xa6(is(n't| not) set|does(n't|\
  \ not) exist[s]))"
TargetReason:
- '[the] target reason'
